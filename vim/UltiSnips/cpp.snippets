priority -50
# C snippets

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet fori "for int loop (fori)"
for (${1:int} ${2:i} = 0; $2 < ${3:n}; ${4:$2++}) {
	${VISUAL}$0
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}($3);
endsnippet

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

##
## STL Collections
# std::array
snippet array
std::array<${1:T}, ${2:N}> ${3};
endsnippet
# std::vector
snippet vector
std::vector<${1:T}> ${2};
endsnippet
# std::vector<std::string>
snippet vecs
std::vector<std::string> ${1};
endsnippet
# std::deque
snippet deque
std::deque<${1:T}> ${2};
endsnippet
# std::forward_list
snippet flist
std::forward_list<${1:T}> ${2};
endsnippet
# std::list
snippet list
std::list<${1:T}> ${2};
endsnippet
# std::set
snippet set
std::set<${1:T}> ${2};
endsnippet
# std::map
snippet map
std::map<${1:Key}, ${2:Value}> ${3};
endsnippet
# std::map<std::string, T>
snippet maps
std::map<std::string, ${1:Value}> ${2};
endsnippet
# std::multiset
snippet mset
std::multiset<${1:T}> ${2};
endsnippet
# std::multimap
snippet mmap
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# std::unordered_set
snippet uset
std::unordered_set<${1:T}> ${2};
endsnippet
# std::unordered_map
snippet umap
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet
# std::unordered_multiset
snippet umset
std::unordered_multiset<${1:T}> ${2};
endsnippet
# std::unordered_multimap
snippet ummap
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# std::stack
snippet stack
std::stack<${1:T}> ${2};
endsnippet
# std::queue
snippet queue
std::queue<${1:T}> ${2};
endsnippet
# std::priority_queue
snippet pqueue
std::priority_queue<${1:T}> ${2};
endsnippet
# std::string
snippet string "std::string" !i
std::string${1}
endsnippet
##
## Input/Output
# std::cout
snippet cout
std::cout << ${1} << std::endl;
endsnippet
# std::cin
snippet cin
std::cin >> ${1};
endsnippet
##
## Casts
# static
snippet sca
static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
snippet rca
reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
## Iteration
# foreach
snippet fore
for (${1:auto&} ${2:i} : ${3:container}) {
	${4}
}
endsnippet
# auto iterator
snippet iter
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
	${3:std::cout << *$1 << std::endl;}
}
endsnippet
##
## Algorithms
# sort
snippet sort
std::sort(${1:container}.begin(), $1.end());
endsnippet
# reverse 
snippet reverse 
std::reverse(${1:container}.begin(), $1.end());
endsnippet
## Lambda
# lambda (multi-line)
snippet lamb
[${1:&}](${2}) {
	${3}
};
endsnippet

# vim:ft=snippets:
